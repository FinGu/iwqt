
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__iwd_agent_server_glue_h__adaptor__H__
#define __sdbuscpp__iwd_agent_server_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace net {
namespace connman {
namespace iwd {

class Agent_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "net.connman.iwd.Agent";

protected:
    Agent_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    Agent_adaptor(const Agent_adaptor&) = delete;
    Agent_adaptor& operator=(const Agent_adaptor&) = delete;
    Agent_adaptor(Agent_adaptor&&) = delete;
    Agent_adaptor& operator=(Agent_adaptor&&) = delete;

    ~Agent_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable( sdbus::registerMethod("Release").implementedAs([this](){ return this->Release(); })
                          , sdbus::registerMethod("RequestPassphrase").withInputParamNames("path").withOutputParamNames("arg0").implementedAs([this](const sdbus::ObjectPath& path){ return this->RequestPassphrase(path); })
                          , sdbus::registerMethod("RequestPrivateKeyPassphrase").withInputParamNames("path").withOutputParamNames("arg0").implementedAs([this](const sdbus::ObjectPath& path){ return this->RequestPrivateKeyPassphrase(path); })
                          , sdbus::registerMethod("RequestUserNameAndPassword").withInputParamNames("path").withOutputParamNames("arg0", "arg1").implementedAs([this](const sdbus::ObjectPath& path){ return this->RequestUserNameAndPassword(path); })
                          , sdbus::registerMethod("Cancel").withInputParamNames("reason").implementedAs([this](const std::string& reason){ return this->Cancel(reason); })
                          ).forInterface(INTERFACE_NAME);
    }

private:
    virtual void Release() = 0;
    virtual std::string RequestPassphrase(const sdbus::ObjectPath& path) = 0;
    virtual std::string RequestPrivateKeyPassphrase(const sdbus::ObjectPath& path) = 0;
    virtual std::tuple<std::string, std::string> RequestUserNameAndPassword(const sdbus::ObjectPath& path) = 0;
    virtual void Cancel(const std::string& reason) = 0;

private:
    sdbus::IObject& m_object;
};

}}} // namespaces

#endif
